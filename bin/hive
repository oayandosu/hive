#!/usr/bin/env node

require('../lib/util/cli');
var hive = require('../index');

var _ = require('underscore');

//Default options
var options = {};

//Map functionality to args
var commands = {
	new: function(args) {
		if(options.name) {
			if(!args.model) {
				project(options.name);
			}
		}
	},
	model: function(args) {
		
	},
	design: function(args) {
		
	},
	done: function(args) {
		
	},
	y: function(args) {
		
	},
	n: function(args) {
		
	}
}
var allCommands = _.keys(commands);

function loop(inputs) {

	//Find the non command argument (usually the name of the new object)
	inputs.forEach(function(command) {
		if(!_.contains(allCommands, command)) {
			options.name = command;
		}
	});
	
	//Run all the commands
	inputs.forEach(function(command) {
		if(_.contains(allCommands, command)) {
			commands[command](inputs);
		}
	});	
	
}

function model(inputs) {
	
}

function project(name) {
	
	//Create in cd
	var cd = process.env.PWD;
	var root = new hive.Dir({path: cd});
	root.save();
	
	// paste in the templates
	var templates = new hive.Dir({path: __dirname + '/templates/basic'});
	var copy = templates.paste(root, name);
	copy.bind('pasted', function() {
		
		var extensions = ['.js', '.haml', '.ejs', '.css'];
		
		// get every file in the new root
		root.find(function(file) {
			if(extensions.indexOf(file.ext()) > -1) {
				// file.update(function(data) {
				// 				return template(data);
				// 			});
			}
		 });
	});

}

function template(data) {
	var str = data.toString();
	for(var o in options) {
		var key = '[%= '+ o +' %]';
		str = str.replace(key, options[o]);
	}
	hive.log('\r\nWRITING TEMPLATE\r\n');
	return str;
}


loop(process.argv);